[{"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\index.js":"1","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\reportWebVitals.js":"2","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\App.js":"3","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\exampleComponent.js":"4","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\Editor.js":"5","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\RightTable.js":"6","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\BottomTable.js":"7","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\BottomRightTable.js":"8","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\ContentEditor.js":"9","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\ImageOnly.js":"10","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\LeftSelector.js":"11","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\Table.js":"12","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\KeyTable.js":"13","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\TableHolder.js":"14","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\JSONReader.js":"15"},{"size":695,"mtime":1621205869526,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":528,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":2142,"mtime":1608753459016,"results":"21","hashOfConfig":"17"},{"size":2874,"mtime":1623378538806,"results":"22","hashOfConfig":"17"},{"size":4868,"mtime":1614216610846,"results":"23","hashOfConfig":"17"},{"size":3239,"mtime":1614220710764,"results":"24","hashOfConfig":"17"},{"size":7542,"mtime":1627006459219,"results":"25","hashOfConfig":"17"},{"size":9108,"mtime":1628876514347,"results":"26","hashOfConfig":"17"},{"size":1643,"mtime":1614220612007,"results":"27","hashOfConfig":"17"},{"size":3875,"mtime":1623380014991,"results":"28","hashOfConfig":"17"},{"size":7437,"mtime":1627656693820,"results":"29","hashOfConfig":"17"},{"size":9130,"mtime":1627071091032,"results":"30","hashOfConfig":"17"},{"size":2854,"mtime":1627006459222,"results":"31","hashOfConfig":"17"},{"size":469,"mtime":1617999151949,"results":"32","hashOfConfig":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"435dzt",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"5tyx9s",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\index.js",["72","73"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ExampleComponent from \"./exampleComponent\"\n import reportWebVitals from './reportWebVitals';\n//import {render} from \"@testing-library/react\";\nimport Editor from \"./Editor\";\nimport LeftSelector from \"./LeftSelector\";\nfunction dynamic() {\n    ReactDOM.render(\n       <LeftSelector/>,\n        document.getElementById('left')\n    );\n}\n dynamic();\n//setInterval(dynamic, 1000);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["74","75"],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\reportWebVitals.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\App.js",[],["76","77"],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\exampleComponent.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\Editor.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\RightTable.js",["78"],"import React from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from \"./Table\";\r\nimport KeyTable from \"./KeyTable\";\r\n\r\n\r\nexport class RightTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [1, 2,],\r\n            title: \"\",\r\n            probStatement: \"\",\r\n            showImage: true\r\n        }\r\n        this.append = this.append.bind(this);\r\n        this.pop = this.pop.bind(this);\r\n        this.showImageHandler = this.showImageHandler.bind(this);\r\n\r\n    }\r\n\r\n    renderTable() {\r\n        return <table className=\"\">\r\n            <thead>\r\n            <tr>\r\n                {this.renderRowsSelection(this.state.columns.length)}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.renderRows(this.state.columns.length)}\r\n            </tbody>\r\n        </table>\r\n    }\r\n\r\n    append(e) {\r\n        let a = this.state.columns;\r\n        a.push(a.length + 1);\r\n        this.setState({\r\n            columns: a\r\n        })\r\n        //rerender here\r\n        this.renderTable();\r\n    }\r\n\r\n    pop(e) {\r\n        let a = this.state.columns;\r\n        console.log(\"popping: \" + a.length);\r\n        if (a.length !== 1) {\r\n            a.pop();\r\n            this.setState({\r\n                columns: a\r\n            })\r\n            //rerender here\r\n            this.renderTable();\r\n        }\r\n    }\r\n\r\n    tableOptions() {\r\n        return <select className={\"headerSelector\"}>\r\n            <option value={\"IP Address\"}>\"IP Address\"</option>\r\n            <option value={\"MAC Address\"}>MAC Address</option>\r\n            <option value={\"VLAN\"}>VLAN</option>\r\n            <option value={\"Router\"}>Router</option>\r\n            <option value={\"Gateway\"}>Gateway</option>\r\n        </select>\r\n    }\r\n\r\n    onTitleChange(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    onProbStatementChange(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    renderRowsSelection(rows) {\r\n        let r = [<th scope=\"col\">{this.tableOptions()} </th>];\r\n        for (let i = 0; i < rows - 1; i++) {\r\n            r.push(<th scope=\"col\">{this.tableOptions()} </th>);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    renderRows(rows) {\r\n        let r = [<td>1</td>];\r\n        for (let i = 0; i < rows - 1; i++) {\r\n            r.push(<td>1</td>);\r\n        }\r\n        return <tr>{r}</tr>;\r\n    }\r\n\r\n    showImageHandler(event) {\r\n        const target = event.target;\r\n        const value = target.checked;\r\n        this.setState({\r\n            showImage: value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"rightBody\">\r\n\r\n                    <h3 className={\"centerText\"}>Title</h3>\r\n                    <div className={\"centerInput\"}>\r\n                        <input type=\"text\" name=\"Title\" className={\"inputBoxLong\"} placeholder={\"Title\"}\r\n                               onChange={this.onTitleChange} value={this.state.title}/>\r\n                    </div>\r\n                    <br/>\r\n                    <h3 className={\"centerText\"}>Problem Info</h3>\r\n                    <div className={\"imageToggler\"}>\r\n                    </div>\r\n                    <div className=\"graphicsSelector\">\r\n                        <div className=\"routerImageBottom\">\r\n                            <label className=\"container\">\r\n                                <input type=\"checkbox\"\r\n                                       checked={this.state.showImage}\r\n                                       onChange={this.showImageHandler}/>\r\n                                <span className=\"checkmark\"></span>\r\n                                <h5 className=\"labelText\"> Show Image?</h5>\r\n                            </label>\r\n                            <img className={this.state.showImage ? \"routerImage\" : \"routerImage hidden\"}\r\n                                 src=\"https://img-en.fs.com/community/wp-content/uploads/2017/10/How-routers-route-packets-from-the-source-to-the-destination.jpg\"/>\r\n                        </div>\r\n                        <div className=\"TableDiv\">\r\n                            <Table/>\r\n                        </div>\r\n                    </div>\r\n                    <KeyTable/>\r\n                    <div className={\"centerInput\"}>\r\n                        <label className={\"labelClass\"}>Problem Statement</label>\r\n                        <input type={\"text\"} name={\"problemStatement\"} className={\"inputBoxLong\"}\r\n                               placeholder={\"Problem Statement\"} onChange={this.onProbStatementChange}\r\n                               value={this.state.probStatement}/>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nexport default RightTable;","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\BottomTable.js",["79"],"import React from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from \"./Table\";\r\nimport KeyTable from \"./KeyTable\";\r\n\r\n\r\nexport class BottomTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n            probStatement: \"\",\r\n            showImage: true\r\n        }\r\n        this.showImageHandler = this.showImageHandler.bind(this);\r\n\r\n    }\r\n\r\n    onTitleChange(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    onProbStatementChange(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    showImageHandler(event) {\r\n        const target = event.target;\r\n        const value = target.checked;\r\n        this.setState({\r\n            showImage: value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"rightBody\">\r\n\r\n                    <h3 className={\"centerText\"}>Title</h3>\r\n                    <div className={\"centerInput\"}>\r\n                        <input type=\"text\" name=\"Title\" className={\"inputBoxLong\"} placeholder={\"Title\"}\r\n                               onChange={this.onTitleChange} value={this.state.title}/>\r\n                    </div>\r\n                    <br/>\r\n                    <h3 className={\"centerText\"}>Problem Info</h3>\r\n\r\n\r\n                    <div className=\"graphicsSelectorBottom\">\r\n                        <div className=\"routerImageBottom\">\r\n                            <label className=\"container\">\r\n                                <input type=\"checkbox\"\r\n                                       checked={this.state.showImage}\r\n                                       onChange={this.showImageHandler}/>\r\n                                <span className=\"checkmark\"></span>\r\n                                <h5 className=\"labelText\"> Show Image?</h5>\r\n                            </label>\r\n                            <img className={this.state.showImage ? \"routerImage\" : \"routerImage hidden\"}\r\n                                 src=\"https://img-en.fs.com/community/wp-content/uploads/2017/10/How-routers-route-packets-from-the-source-to-the-destination.jpg\"/>\r\n                        </div>\r\n                    </div>\r\n                    <KeyTable/>\r\n                    <div className=\"sideBySide\">\r\n                        <div className=\"TableDivBottom BottomLeft\">\r\n                            <Table/>\r\n                        </div>\r\n                        <div className=\"TableDivBottom BottomRight\">\r\n                            <Table/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={\"centerInput\"}>\r\n                        <label className={\"labelClass\"}>Problem Statement</label>\r\n                        <input type={\"text\"} name={\"problemStatement\"} className={\"inputBoxLong\"}\r\n                               placeholder={\"Problem Statement\"} onChange={this.onProbStatementChange}\r\n                               value={this.state.probStatement}/>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nexport default BottomTable;","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\BottomRightTable.js",["80"],"import React from \"react\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport KeyTable from \"./KeyTable\";\r\nimport TableHolder from \"./TableHolder\";\r\n\r\nexport class BottomRightTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setupImageArray = this.setupImageArray.bind(this);\r\n        this.showImageHandler = this.showImageHandler.bind(this);\r\n        this.changeImage = this.changeImage.bind(this);\r\n        this.saveRightTable = this.saveRightTable.bind(this);\r\n        this.saveBottomRightTable = this.saveBottomRightTable.bind(this);\r\n        this.saveBottomLeftTable = this.saveBottomLeftTable.bind(this);\r\n        this.onTitleChange = this.onTitleChange.bind(this);\r\n        this.onProbStatementChange = this.onProbStatementChange.bind(this);\r\n        this.saveKeyData = this.saveKeyData.bind(this);\r\n        this.state = {\r\n            imageFormats: [\"default-neato.png\", \"default-circo.png\", \"stp-dot.png\", \"stp-circo-nohost.png\", \"stp-dot-nohost.png\", \"stp-neato-nohost.png\"],\r\n            showImage: true,\r\n            currentImage: \"default-neato.png\",\r\n            select: \"\",\r\n            rightTable: <TableHolder reference={this} saveDataTable={ this.saveRightTable}/>,\r\n            bottomRightTable: <TableHolder reference={this} saveDataTable={ this.saveBottomRightTable}/>,\r\n            bottomLeftTable: <TableHolder reference={this} saveDataTable={this.saveBottomLeftTable}/>,\r\n            problemStatement: \"\",\r\n            contents: {\r\n                \"BottomLeft\": {},\r\n                \"BottomRight\": {},\r\n                \"RightTable\": {},\r\n                \"KeyData\": {}\r\n            }\r\n        };\r\n    }\r\n\r\n    saveBottomLeftTable(data, reference) {\r\n        let update = reference.state.contents;\r\n        console.log(\"111111\")\r\n        data[\"imageformat\"] = reference.state.currentImage;\r\n        data[\"showImage\"] = reference.state.showImage;\r\n        data[\"Problem Title\"] = reference.state.title;\r\n        data[\"Problem Statement\"] = reference.state.problemStatement;\r\n        update[\"BottomLeft\"] = data\r\n        console.log(data)\r\n        reference.setState({\r\n            contents: update\r\n        })\r\n        reference.props.saveData(reference.state.contents)\r\n    }\r\n\r\n    saveBottomRightTable(data, reference) {\r\n        let update = reference.state.contents;\r\n        console.log(\"111111\")\r\n        update[\"BottomRight\"] = data\r\n        reference.setState({\r\n            contents: update\r\n        })\r\n        reference.props.saveData(reference.state.contents)\r\n    }\r\n\r\n    saveKeyData(data,reference) {\r\n        let update = reference.state.contents;\r\n        console.log(\"222222\");\r\n        update[\"KeyData\"] = data\r\n        reference.setState({\r\n            contents: update\r\n        })\r\n        reference.props.saveData(reference.state.contents)\r\n        console.log(reference.state.contents);\r\n\r\n    }\r\n\r\n    saveRightTable(data, reference) {\r\n        let update = reference.state.contents;\r\n        console.log(\"111111\")\r\n        update[\"RightTable\"] = data\r\n        reference.setState({\r\n            contents: update\r\n        })\r\n        reference.props.saveData(reference.state.contents)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setupImageArray();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(\"so it updated...what now?\")\r\n        this.props.saveData(this.state.contents)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.saveData(this.state.contents)\r\n    }\r\n\r\n    getCurrentImage() {\r\n        return this.state.currentImage;\r\n    }\r\n\r\n    getTableHolders() {\r\n        let th = {\r\n            rightTable: this.state.rightTable,\r\n            bottomRightTable: this.state.bottomRightTable,\r\n            bottomLeftTable: this.state.bottomLeftTable\r\n        }\r\n        return th;\r\n    }\r\n\r\n    onTitleChange(event) {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    onProbStatementChange(event) {\r\n        this.setState({\r\n            problemStatement: event.target.value\r\n        })\r\n    }\r\n\r\n    showImageHandler(event) {\r\n        const target = event.target;\r\n        const value = target.checked;\r\n        this.setState({\r\n            showImage: value\r\n        });\r\n\r\n    }\r\n\r\n    changeImage(event) {\r\n        let val = event.target.value;\r\n        this.setState({\r\n            currentImage: val\r\n        })\r\n    }\r\n\r\n    setupImageArray() {\r\n        let images = this.state.imageFormats\r\n        let a = [<option value={images[0]}>{images[0]}</option>];\r\n        for (let i = 1; i < images.length; i++) {\r\n            a.push(<option value={images[i]}>{images[i]}</option>);\r\n        }\r\n        let af = <select className={\"headerSelector\"}\r\n                         onChange={this.changeImage}>\r\n            {a}\r\n        </select>;\r\n        this.setState({\r\n            select: af\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"rightBody\">\r\n                    <h3 className={\"centerText\"}>Title</h3>\r\n                    <div className={\"centerInput\"}>\r\n                        <input type=\"text\" name=\"Title\" className={\"inputBoxLong\"} placeholder={\"Title\"}\r\n                               onChange={this.onTitleChange} value={this.state.title}/>\r\n                    </div>\r\n                    <br/>\r\n                    <h3 className={\"centerText\"}>Problem Info</h3>\r\n                    <div className=\"graphicsSelector\">\r\n                        <div className=\"routerImageBottom\">\r\n                            <div className=\"tablePadding\">\r\n                                <label className=\"container\">\r\n                                    <input type=\"checkbox\"\r\n                                           checked={this.state.showImage}\r\n                                           onChange={this.showImageHandler}/>\r\n                                    <span className=\"checkmark\"></span>\r\n                                    <h5 className=\"labelText\"> Show Image?</h5>\r\n                                </label>\r\n                                {this.state.select}\r\n                            </div>\r\n\r\n                            <img className={this.state.showImage ? \"routerImage\" : \"routerImage hidden\"}\r\n                                 src={this.state.currentImage}/>\r\n                        </div>\r\n                        <div className=\"TableDiv\">\r\n                            {this.state.rightTable}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sideBySide\">\r\n                        <div className=\"TableDivBottom BottomLeft\">\r\n                            {this.state.bottomLeftTable}\r\n                        </div>\r\n                        <div className=\"TableDivBottom BottomRight\">\r\n                            {this.state.bottomRightTable}\r\n                        </div>\r\n                    </div>\r\n                    <KeyTable saveKeyData={this.saveKeyData} reference={this}/>\r\n                    <div className={\"centerInput\"}>\r\n                        <label className={\"labelClass\"}>Problem Statement</label>\r\n                        <input type={\"text\"} name={\"problemStatement\"} className={\"inputBoxLong\"}\r\n                               placeholder={\"Problem Statement\"} onChange={this.onProbStatementChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nexport default BottomRightTable\r\n","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\ContentEditor.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\ImageOnly.js",["81","82"],"import React, {Fragment} from \"react\";\r\nimport KeyTable from \"./KeyTable\";\r\n\r\nexport class ImageOnly extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showImage: true\r\n        }\r\n        this.showImageHandler = this.showImageHandler.bind(this);\r\n    }\r\n\r\n    showImageHandler(event) {\r\n        const target = event.target;\r\n        const value = target.checked;\r\n        this.setState({\r\n            showImage: value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"rightBody\">\r\n                    <div className=\"graphicsSelector\">\r\n                        <div className=\"routerImageBottom\">\r\n                            <label className=\"container\">\r\n                                <input type=\"checkbox\"\r\n                                       checked={this.state.showImage}\r\n                                       onChange={this.showImageHandler}/>\r\n                                <span className=\"checkmark\"></span>\r\n                                <h5 className= \"labelText\">  Show Image?</h5>\r\n                            </label>\r\n                            <img className={this.state.showImage ? \"routerImage\" : \"routerImage hidden\"}\r\n                                 src=\"https://img-en.fs.com/community/wp-content/uploads/2017/10/How-routers-route-packets-from-the-source-to-the-destination.jpg\"/>\r\n                        </div>\r\n                    </div>\r\n                    <KeyTable/>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nexport default ImageOnly;","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\LeftSelector.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\Table.js",[],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\KeyTable.js",["83","84"],"import React from \"react\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n/*\r\nUnrelated to problem SOlution\r\n */\r\nclass KeyTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableValues: [], //hold drop down values\r\n            tableKeys: this.getKeysFromDB(), //holds database keys\r\n            modalKeys: [], //holds key data\r\n            showModal: false,\r\n            title: [],\r\n            body: <React.Fragment><h1>asdf</h1></React.Fragment>\r\n        }\r\n        this.removeObjFromArray = this.removeObjFromArray.bind(this);\r\n        this.addRow = this.addRow.bind(this);\r\n        this.constructOptions = this.constructOptions.bind(this);\r\n        this.changeOption = this.changeOption.bind(this);\r\n        this.constructDropdown = this.constructDropdown.bind(this);\r\n        this.showModal = this.showModal.bind(this);\r\n        this.hideModal = this.hideModal.bind(this);\r\n        this.unHideModal = this.unHideModal.bind(this);\r\n        this.onToggle = this.onToggle.bind(this);\r\n        this.buildModalData = this.buildModalData.bind(this);\r\n        this.changeInput = this.changeInput.bind(this);\r\n    }\r\n\r\n    hideModal() {\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    showModal(i) {\r\n        console.log(\"Showing the modal \" + this.state.showModal);\r\n        return (\r\n            <Modal show={this.state.showModal} onHide={() => this.hideModal()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Select Options</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{this.state.body}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => this.hideModal()}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    removeObjFromArray(index) {\r\n        let variables = this.state.tableValues;\r\n        variables.splice(index, 1)\r\n        this.constructTable();\r\n        this.save();\r\n    }\r\n\r\n    addRow() {\r\n        let variables = this.state.tableValues;\r\n        let variableKeys = this.state.modalKeys;\r\n        let titles = this.state.title;\r\n        variables.push([\"Host\"])\r\n        variableKeys.push(this.buildKeys())\r\n        titles.push(\"\");\r\n        this.setState({\r\n            tableValues: variables,\r\n            modalKeys: variableKeys,\r\n            title: titles\r\n        })\r\n        this.constructTable();\r\n        this.save()\r\n    }\r\n\r\n    getKeysFromDB() {\r\n        return [\"Render\", \"Option1\", \"Option2\"]\r\n    }\r\n\r\n    buildKeys() {\r\n        return {Render: false, Option1: false, Option2: false}\r\n    }\r\n\r\n    changeOption(e, index) {\r\n        let v = this.state.tableValues;\r\n        v[index] = this.constructDropdown(e.target.value.toString(), index);\r\n        this.setState({\r\n            tableValues: v\r\n        });\r\n        this.constructTable();\r\n        // this.constructDropdown(this.state.tableValues[index])\r\n        this.save()\r\n    }\r\n\r\n\r\n    save() {\r\n        let list = this.state.title;\r\n        let data = {};\r\n        let modalKeys = this.state.modalKeys;\r\n        let identifiers = this.state.tableValues\r\n        for (let i = 0; i < list.length; i++) {\r\n            let s = modalKeys[i];\r\n            data[list[i]] = {KeyData: s, Identifier: identifiers[i]};\r\n        }\r\n        console.log(data);\r\n        console.log(\"FUCKING WHORE\")\r\n        this.props.saveKeyData(data, this.props.reference);\r\n    }\r\n\r\n    constructOptions(i) {\r\n        return <select onChange={(e) => this.changeOption(e, i)}\r\n                       className={\"headerSelector\"}>\r\n            <option selected value={\"-\"}>-</option>\r\n            <option value={\"host\"}>Host</option>\r\n            <option value={\"bridge\"}>Bridge</option>\r\n            <option value={\"gateway\"}>Gateway</option>\r\n            <option value={\"router\"}>Router</option>\r\n        </select>\r\n    }\r\n\r\n    onToggle(e, index, key) {\r\n        let list = this.state.modalKeys;\r\n        if (list[index][key] == false) {\r\n            list[index][key] = true;\r\n            console.log(\"Setting True\");\r\n        } else {\r\n            console.log(\"Setting false\");\r\n            list[index][key] = false;\r\n        }\r\n\r\n        console.log(\"toggled:\" + e.target.checked);\r\n        this.setState({\r\n            modalKeys: list\r\n        });\r\n        console.log(list)\r\n\r\n        //this.save();\r\n    }\r\n\r\n//TODO Fix UI bug where keys don't update\r\n    buildModalData(reference, i) {\r\n        let list = this.state.modalKeys[i];\r\n        let items = [];\r\n        console.log(\"index....\" + i);\r\n        let innerData = (index, key) => {\r\n            let e = <label className=\"container\" key={key}>\r\n                <h4 className={\"customCheckmarkLabel\"}>{key}</h4>\r\n                <input key={key} type=\"checkbox\" checked={this.state.modalKeys[i][key]}\r\n                       onChange={(e) => this.onToggle(e, i, key)}/>\r\n                <span checked={this.state.modalKeys[i][key]} className=\"checkmark\"></span>\r\n            </label>\r\n            return e;\r\n        }\r\n\r\n        Object.keys(list).forEach(function (key) {\r\n            let e = innerData(i, key);\r\n            items.push(e);\r\n        });\r\n        console.log(items);\r\n        return items;\r\n    }\r\n\r\n    unHideModal(i) {\r\n        let body = <React.Fragment>\r\n            {this.buildModalData(this, i)}\r\n        </React.Fragment>;\r\n        this.setState(\r\n            {\r\n                showModal: true,\r\n                body: body,\r\n             }\r\n        );\r\n    }\r\n\r\n    constructDropdown(param, index) {\r\n        console.log(\"constructing with: \" + param + \"_\");\r\n        this.showModal();\r\n        switch (param) {\r\n            case \"host\":\r\n                console.log(\"host.....\")\r\n                return <button className={\"rightColumnButtons\"} onClick={() => this.unHideModal(index)}>\r\n                    Options\r\n                </button>\r\n            case \"bridge\":\r\n                console.log(\"bridge.....\")\r\n                return <button className={\"rightColumnButtons\"} onClick={() => this.unHideModal(index)}>\r\n                    Options\r\n                </button>\r\n            case \"router\":\r\n                console.log(\"router.....\")\r\n                return <button className={\"rightColumnButtons\"} onClick={() => this.unHideModal(index)}>\r\n                    Options\r\n                </button>\r\n            case \"gateway\":\r\n                console.log(\"gateway.....\")\r\n                return <button className={\"rightColumnButtons\"} onClick={() => this.unHideModal(index)}>\r\n                    Options\r\n                </button>\r\n            default:\r\n                console.log(\".....default\")\r\n                return <button className={\"rightColumnButtons\"} onClick={() => this.unHideModal(index)}>\r\n                    Options\r\n                </button>\r\n        }\r\n    }\r\n\r\n    changeInput(e, i) {\r\n        let value = e.target.value;\r\n        let list = this.state.title;\r\n        console.log(list);\r\n        console.log(\"ffffasd\")\r\n        list[i] = value;\r\n        this.setState({\r\n            title: list\r\n        });\r\n        this.save();\r\n    }\r\n\r\n    constructTable() {\r\n        let variables = this.state.tableValues;\r\n        let a = [];\r\n        for (let i = 0; i < variables.length; i++) {\r\n            a.push(<tr key={i}>\r\n                <td className={\"tdButton\"}>\r\n                    <button className=\"Append\" onClick={() => this.removeObjFromArray(i)}>\r\n                        -\r\n                    </button>\r\n                </td>\r\n                <td className={\"tdFormat\"} key={i + \"child_1\"}><input placeholder=\"Give variable a name\"\r\n                                                                      onInput={(e) => this.changeInput(e, i)}\r\n                /></td>\r\n                <td key={i + \"child_2\"}>{this.constructOptions(i)}</td>\r\n                <td key={i + \"child_3\"}>{variables[i]}</td>\r\n            </tr>);\r\n            console.log(\"going through matrix:\");\r\n        }\r\n        this.setState({\r\n            tablesElements: a\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.constructTable();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.showModal()}\r\n                <div className=\"keyTable\">\r\n                    <div className=\"imageToggler\">\r\n                        <button className=\"Append appendKey\" onClick={() => this.addRow()}>\r\n                            +\r\n                        </button>\r\n                        <div>\r\n                            <h3 id=\"KeyTableLabel\">Key Table</h3>\r\n                            <table className=\"tableSpacing\">\r\n                                <tbody>\r\n                                {this.state.tablesElements}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default KeyTable;\r\n","C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\TableHolder.js",[],["85","86"],"C:\\Users\\alexa\\WebstormProjects\\jupyterlabscreator\\src\\JSONReader.js",[],{"ruleId":"87","severity":1,"message":"88","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":24},{"ruleId":"87","severity":1,"message":"91","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":14},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"92","replacedBy":"96"},{"ruleId":"94","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":127,"column":29,"nodeType":"100","endLine":128,"endColumn":165},{"ruleId":"98","severity":1,"message":"99","line":62,"column":29,"nodeType":"100","endLine":63,"endColumn":165},{"ruleId":"98","severity":1,"message":"99","line":179,"column":29,"nodeType":"100","endLine":180,"endColumn":65},{"ruleId":"87","severity":1,"message":"101","line":1,"column":16,"nodeType":"89","messageId":"90","endLine":1,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":34,"column":29,"nodeType":"100","endLine":35,"endColumn":165},{"ruleId":"87","severity":1,"message":"102","line":3,"column":9,"nodeType":"89","messageId":"90","endLine":3,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":122,"column":30,"nodeType":"105","messageId":"106","endLine":122,"endColumn":32},{"ruleId":"92","replacedBy":"107"},{"ruleId":"94","replacedBy":"108"},"no-unused-vars","'ExampleComponent' is defined but never used.","Identifier","unusedVar","'Editor' is defined but never used.","no-native-reassign",["109"],"no-negated-in-lhs",["110"],["109"],["110"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Fragment' is defined but never used.","'forEach' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["109"],["110"],"no-global-assign","no-unsafe-negation"]